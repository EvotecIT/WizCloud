using System;
using System.Collections.Generic;
using System.Text.Json.Nodes;

namespace WizCloud;

/// <summary>
/// Represents a vulnerability finding returned by the Wiz API.
/// </summary>
public class WizVulnerability {
    /// <summary>
    /// Gets or sets the unique identifier of the vulnerability.
    /// </summary>
    public string Id { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the CVE identifier.
    /// </summary>
    public string Cve { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the CVSS information.
    /// </summary>
    public WizVulnerabilityCvss? Cvss { get; set; }

    /// <summary>
    /// Gets or sets the published date of the vulnerability.
    /// </summary>
    public DateTime? PublishedDate { get; set; }

    /// <summary>
    /// Gets or sets the last modified date of the vulnerability.
    /// </summary>
    public DateTime? ModifiedDate { get; set; }

    /// <summary>
    /// Gets or sets the description of the vulnerability.
    /// </summary>
    public string? Description { get; set; }

    /// <summary>
    /// Gets or sets the list of affected packages.
    /// </summary>
    public List<WizVulnerabilityPackage> AffectedPackages { get; set; } = new List<WizVulnerabilityPackage>();

    /// <summary>
    /// Gets or sets the list of affected resources.
    /// </summary>
    public List<WizVulnerabilityResource> Resources { get; set; } = new List<WizVulnerabilityResource>();

    /// <summary>
    /// Gets or sets a value indicating whether an exploit is available.
    /// </summary>
    public bool? ExploitAvailable { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether an exploit exists in the wild.
    /// </summary>
    public bool? ExploitInTheWild { get; set; }

    /// <summary>
    /// Creates a <see cref="WizVulnerability"/> from JSON.
    /// </summary>
    public static WizVulnerability FromJson(JsonNode node) {
        var vulnerability = new WizVulnerability {
            Id = node["id"]?.GetValue<string>() ?? string.Empty,
            Cve = node["cve"]?.GetValue<string>() ?? string.Empty,
            PublishedDate = node["publishedDate"]?.GetValue<DateTime?>()?.ToLocalTime(),
            ModifiedDate = node["modifiedDate"]?.GetValue<DateTime?>()?.ToLocalTime(),
            Description = node["description"]?.GetValue<string>(),
            ExploitAvailable = node["exploitAvailable"]?.GetValue<bool?>(),
            ExploitInTheWild = node["exploitInTheWild"]?.GetValue<bool?>()
        };

        var cvssNode = node["cvss"];
        if (cvssNode != null) {
            vulnerability.Cvss = WizVulnerabilityCvss.FromJson(cvssNode);
        }

        var packages = node["affectedPackages"]?.AsArray();
        if (packages != null) {
            foreach (var pkg in packages) {
                if (pkg != null) {
                    vulnerability.AffectedPackages.Add(WizVulnerabilityPackage.FromJson(pkg));
                }
            }
        }

        var resources = node["resources"]?.AsArray();
        if (resources != null) {
            foreach (var res in resources) {
                if (res != null) {
                    vulnerability.Resources.Add(WizVulnerabilityResource.FromJson(res));
                }
            }
        }

        return vulnerability;
    }
}