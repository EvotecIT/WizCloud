using System;
using System.Text.Json.Nodes;
using WizCloud;

namespace WizCloud.Tests;

[TestClass]
public sealed class WizVulnerabilityTests {
    [TestMethod]
    public void FromJson_ParsesNestedObjects() {
        string jsonString = """
        {
          "id": "vul1",
          "cve": "CVE-2024-0001",
          "publishedDate": "2024-01-01T00:00:00Z",
          "modifiedDate": "2024-02-01T00:00:00Z",
          "description": "desc",
          "exploitAvailable": true,
          "exploitInTheWild": false,
          "cvss": {
            "score": 7.5,
            "severity": "HIGH",
            "vector": "AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
          },
          "affectedPackages": [
            { "name": "pkg", "version": "1.0", "fixVersion": "1.1" }
          ],
          "resources": [
            { "id": "res1", "name": "Res", "type": "VM", "cloudPlatform": "AWS" }
          ]
        }
        """;
        JsonNode json = JsonNode.Parse(jsonString)!;
        WizVulnerability vul = WizVulnerability.FromJson(json);

        Assert.AreEqual("vul1", vul.Id);
        Assert.AreEqual("CVE-2024-0001", vul.Cve);
        Assert.AreEqual(DateTime.Parse("2024-01-01T00:00:00Z").ToLocalTime(), vul.PublishedDate);
        Assert.AreEqual(DateTime.Parse("2024-02-01T00:00:00Z").ToLocalTime(), vul.ModifiedDate);
        Assert.AreEqual("desc", vul.Description);
        Assert.IsTrue(vul.ExploitAvailable);
        Assert.IsFalse(vul.ExploitInTheWild);
        Assert.IsNotNull(vul.Cvss);
        Assert.AreEqual(7.5, vul.Cvss!.Score);
        Assert.AreEqual(1, vul.AffectedPackages.Count);
        Assert.AreEqual("pkg", vul.AffectedPackages[0].Name);
        Assert.AreEqual(1, vul.Resources.Count);
        Assert.AreEqual("res1", vul.Resources[0].Id);
    }
}
